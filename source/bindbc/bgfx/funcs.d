module bindbc.bgfx.funcs;

private import bindbc.bgfx.types;

version(BindBgfx_Static)
{
	extern(C) @nogc nothrow
	{
		void bgfx_attachment_init(bgfx_attachment_t* _this, bgfx_texture_handle_t _handle, bgfx_access_t _access, uint16_t _layer, uint16_t _mip, uint8_t _resolve);
		bgfx_vertex_layout_t* bgfx_vertex_layout_begin(bgfx_vertex_layout_t* _this, bgfx_renderer_type_t _rendererType);
		bgfx_vertex_layout_t* bgfx_vertex_layout_add(bgfx_vertex_layout_t* _this, bgfx_attrib_t _attrib, uint8_t _num, bgfx_attrib_type_t _type, bool _normalized, bool _asInt);
		void bgfx_vertex_layout_decode(const(bgfx_vertex_layout_t*) _this, bgfx_attrib_t _attrib, uint8_t* _num, bgfx_attrib_type_t* _type, bool* _normalized, bool* _asInt);
		bool bgfx_vertex_layout_has(const(bgfx_vertex_layout_t*) _this, bgfx_attrib_t _attrib);
		bgfx_vertex_layout_t* bgfx_vertex_layout_skip(bgfx_vertex_layout_t* _this, uint8_t _num);
		void bgfx_vertex_layout_end(bgfx_vertex_layout_t* _this);
		void bgfx_vertex_pack(const float[4] _input, bool _inputNormalized, bgfx_attrib_t _attr, const(bgfx_vertex_layout_t*) _layout, void* _data, uint32_t _index);
		void bgfx_vertex_unpack(float[4] _output, bgfx_attrib_t _attr, const(bgfx_vertex_layout_t*) _layout, const(void*) _data, uint32_t _index);
		void bgfx_vertex_convert(const(bgfx_vertex_layout_t*) _dstLayout, void* _dstData, const(bgfx_vertex_layout_t*) _srcLayout, const(void*) _srcData, uint32_t _num);
		uint16_t bgfx_weld_vertices(uint16_t* _output, const(bgfx_vertex_layout_t*) _layout, const(void*) _data, uint16_t _num, float _epsilon);
		uint32_t bgfx_topology_convert(bgfx_topology_convert_t _conversion, void* _dst, uint32_t _dstSize, const(void*) _indices, uint32_t _numIndices, bool _index32);
		void bgfx_topology_sort_tri_list(bgfx_topology_sort_t _sort, void* _dst, uint32_t _dstSize, const float[3] _dir, const float[3] _pos, const(void*) _vertices, uint32_t _stride, const(void*) _indices, uint32_t _numIndices, bool _index32);
		uint8_t bgfx_get_supported_renderers(uint8_t _max, bgfx_renderer_type_t* _enum);
		const(char*) bgfx_get_renderer_name(bgfx_renderer_type_t _type);
		void bgfx_init_ctor(bgfx_init_t* _init);
		bool bgfx_init(const(bgfx_init_t*) _init);
		void bgfx_shutdown();
		void bgfx_reset(uint32_t _width, uint32_t _height, uint32_t _flags, bgfx_texture_format_t _format);
		uint32_t bgfx_frame(bool _capture);
		bgfx_renderer_type_t bgfx_get_renderer_type();
		const(bgfx_caps_t*) bgfx_get_caps();
		const(bgfx_stats_t*) bgfx_get_stats();
		const(bgfx_memory_t*) bgfx_alloc(uint32_t _size);
		const(bgfx_memory_t*) bgfx_copy(const(void*) _data, uint32_t _size);
		const(bgfx_memory_t*) bgfx_make_ref(const(void*) _data, uint32_t _size);
		const(bgfx_memory_t*) bgfx_make_ref_release(const(void*) _data, uint32_t _size, bgfx_release_fn_t _releaseFn, void* _userData);
		void bgfx_set_debug(uint32_t _debug);
		void bgfx_dbg_text_clear(uint8_t _attr, bool _small);
		void bgfx_dbg_text_printf(uint16_t _x, uint16_t _y, uint8_t _attr, const(char*) _format, ... );
		void bgfx_dbg_text_vprintf(uint16_t _x, uint16_t _y, uint8_t _attr, const(char*) _format, va_list _argList);
		void bgfx_dbg_text_image(uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height, const(void*) _data, uint16_t _pitch);
		bgfx_index_buffer_handle_t bgfx_create_index_buffer(const(bgfx_memory_t*) _mem, uint16_t _flags);
		void bgfx_set_index_buffer_name(bgfx_index_buffer_handle_t _handle, const(char*) _name, int32_t _len);
		void bgfx_destroy_index_buffer(bgfx_index_buffer_handle_t _handle);
		bgfx_vertex_layout_handle_t bgfx_create_vertex_layout(const(bgfx_vertex_layout_t*) _layout);
		void bgfx_destroy_vertex_layout(bgfx_vertex_layout_handle_t _layoutHandle);
		bgfx_vertex_buffer_handle_t bgfx_create_vertex_buffer(const(bgfx_memory_t*) _mem, const(bgfx_vertex_layout_t*) _layout, uint16_t _flags);
		void bgfx_set_vertex_buffer_name(bgfx_vertex_buffer_handle_t _handle, const(char*) _name, int32_t _len);
		void bgfx_destroy_vertex_buffer(bgfx_vertex_buffer_handle_t _handle);
		bgfx_dynamic_index_buffer_handle_t bgfx_create_dynamic_index_buffer(uint32_t _num, uint16_t _flags);
		bgfx_dynamic_index_buffer_handle_t bgfx_create_dynamic_index_buffer_mem(const(bgfx_memory_t*) _mem, uint16_t _flags);
		void bgfx_update_dynamic_index_buffer(bgfx_dynamic_index_buffer_handle_t _handle, uint32_t _startIndex, const(bgfx_memory_t*) _mem);
		void bgfx_destroy_dynamic_index_buffer(bgfx_dynamic_index_buffer_handle_t _handle);
		bgfx_dynamic_vertex_buffer_handle_t bgfx_create_dynamic_vertex_buffer(uint32_t _num, const(bgfx_vertex_layout_t*) _layout, uint16_t _flags);
		bgfx_dynamic_vertex_buffer_handle_t bgfx_create_dynamic_vertex_buffer_mem(const(bgfx_memory_t*) _mem, const(bgfx_vertex_layout_t*) _layout, uint16_t _flags);
		void bgfx_update_dynamic_vertex_buffer(bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, const(bgfx_memory_t*) _mem);
		void bgfx_destroy_dynamic_vertex_buffer(bgfx_dynamic_vertex_buffer_handle_t _handle);
		uint32_t bgfx_get_avail_transient_index_buffer(uint32_t _num);
		uint32_t bgfx_get_avail_transient_vertex_buffer(uint32_t _num, const(bgfx_vertex_layout_t*) _layout);
		uint32_t bgfx_get_avail_instance_data_buffer(uint32_t _num, uint16_t _stride);
		void bgfx_alloc_transient_index_buffer(bgfx_transient_index_buffer_t* _tib, uint32_t _num);
		void bgfx_alloc_transient_vertex_buffer(bgfx_transient_vertex_buffer_t* _tvb, uint32_t _num, const(bgfx_vertex_layout_t*) _layout);
		bool bgfx_alloc_transient_buffers(bgfx_transient_vertex_buffer_t* _tvb, const(bgfx_vertex_layout_t*) _layout, uint32_t _numVertices, bgfx_transient_index_buffer_t* _tib, uint32_t _numIndices);
		void bgfx_alloc_instance_data_buffer(bgfx_instance_data_buffer_t* _idb, uint32_t _num, uint16_t _stride);
		bgfx_indirect_buffer_handle_t bgfx_create_indirect_buffer(uint32_t _num);
		void bgfx_destroy_indirect_buffer(bgfx_indirect_buffer_handle_t _handle);
		bgfx_shader_handle_t bgfx_create_shader(const(bgfx_memory_t*) _mem);
		uint16_t bgfx_get_shader_uniforms(bgfx_shader_handle_t _handle, bgfx_uniform_handle_t* _uniforms, uint16_t _max);
		void bgfx_set_shader_name(bgfx_shader_handle_t _handle, const(char*) _name, int32_t _len);
		void bgfx_destroy_shader(bgfx_shader_handle_t _handle);
		bgfx_program_handle_t bgfx_create_program(bgfx_shader_handle_t _vsh, bgfx_shader_handle_t _fsh, bool _destroyShaders);
		bgfx_program_handle_t bgfx_create_compute_program(bgfx_shader_handle_t _csh, bool _destroyShaders);
		void bgfx_destroy_program(bgfx_program_handle_t _handle);
		bool bgfx_is_texture_valid(uint16_t _depth, bool _cubeMap, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags);
		void bgfx_calc_texture_size(bgfx_texture_info_t* _info, uint16_t _width, uint16_t _height, uint16_t _depth, bool _cubeMap, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format);
		bgfx_texture_handle_t bgfx_create_texture(const(bgfx_memory_t*) _mem, uint64_t _flags, uint8_t _skip, bgfx_texture_info_t* _info);
		bgfx_texture_handle_t bgfx_create_texture_2d(uint16_t _width, uint16_t _height, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags, const(bgfx_memory_t*) _mem);
		bgfx_texture_handle_t bgfx_create_texture_2d_scaled(bgfx_backbuffer_ratio_t _ratio, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags);
		bgfx_texture_handle_t bgfx_create_texture_3d(uint16_t _width, uint16_t _height, uint16_t _depth, bool _hasMips, bgfx_texture_format_t _format, uint64_t _flags, const(bgfx_memory_t*) _mem);
		bgfx_texture_handle_t bgfx_create_texture_cube(uint16_t _size, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags, const(bgfx_memory_t*) _mem);
		void bgfx_update_texture_2d(bgfx_texture_handle_t _handle, uint16_t _layer, uint8_t _mip, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height, const(bgfx_memory_t*) _mem, uint16_t _pitch);
		void bgfx_update_texture_3d(bgfx_texture_handle_t _handle, uint8_t _mip, uint16_t _x, uint16_t _y, uint16_t _z, uint16_t _width, uint16_t _height, uint16_t _depth, const(bgfx_memory_t*) _mem);
		void bgfx_update_texture_cube(bgfx_texture_handle_t _handle, uint16_t _layer, uint8_t _side, uint8_t _mip, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height, const(bgfx_memory_t*) _mem, uint16_t _pitch);
		uint32_t bgfx_read_texture(bgfx_texture_handle_t _handle, void* _data, uint8_t _mip);
		void bgfx_set_texture_name(bgfx_texture_handle_t _handle, const(char*) _name, int32_t _len);
		void* bgfx_get_direct_access_ptr(bgfx_texture_handle_t _handle);
		void bgfx_destroy_texture(bgfx_texture_handle_t _handle);
		bgfx_frame_buffer_handle_t bgfx_create_frame_buffer(uint16_t _width, uint16_t _height, bgfx_texture_format_t _format, uint64_t _textureFlags);
		bgfx_frame_buffer_handle_t bgfx_create_frame_buffer_scaled(bgfx_backbuffer_ratio_t _ratio, bgfx_texture_format_t _format, uint64_t _textureFlags);
		bgfx_frame_buffer_handle_t bgfx_create_frame_buffer_from_handles(uint8_t _num, const(bgfx_texture_handle_t*) _handles, bool _destroyTexture);
		bgfx_frame_buffer_handle_t bgfx_create_frame_buffer_from_attachment(uint8_t _num, const(bgfx_attachment_t*) _attachment, bool _destroyTexture);
		bgfx_frame_buffer_handle_t bgfx_create_frame_buffer_from_nwh(void* _nwh, uint16_t _width, uint16_t _height, bgfx_texture_format_t _format, bgfx_texture_format_t _depthFormat);
		void bgfx_set_frame_buffer_name(bgfx_frame_buffer_handle_t _handle, const(char*) _name, int32_t _len);
		bgfx_texture_handle_t bgfx_get_texture(bgfx_frame_buffer_handle_t _handle, uint8_t _attachment);
		void bgfx_destroy_frame_buffer(bgfx_frame_buffer_handle_t _handle);
		bgfx_uniform_handle_t bgfx_create_uniform(const(char*) _name, bgfx_uniform_type_t _type, uint16_t _num);
		void bgfx_get_uniform_info(bgfx_uniform_handle_t _handle, bgfx_uniform_info_t* _info);
		void bgfx_destroy_uniform(bgfx_uniform_handle_t _handle);
		bgfx_occlusion_query_handle_t bgfx_create_occlusion_query();
		bgfx_occlusion_query_result_t bgfx_get_result(bgfx_occlusion_query_handle_t _handle, int32_t* _result);
		void bgfx_destroy_occlusion_query(bgfx_occlusion_query_handle_t _handle);
		void bgfx_set_palette_color(uint8_t _index, const float[4] _rgba);
		void bgfx_set_palette_color_rgba8(uint8_t _index, uint32_t _rgba);
		void bgfx_set_view_name(bgfx_view_id_t _id, const(char*) _name);
		void bgfx_set_view_rect(bgfx_view_id_t _id, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height);
		void bgfx_set_view_rect_ratio(bgfx_view_id_t _id, uint16_t _x, uint16_t _y, bgfx_backbuffer_ratio_t _ratio);
		void bgfx_set_view_scissor(bgfx_view_id_t _id, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height);
		void bgfx_set_view_clear(bgfx_view_id_t _id, uint16_t _flags, uint32_t _rgba, float _depth, uint8_t _stencil);
		void bgfx_set_view_clear_mrt(bgfx_view_id_t _id, uint16_t _flags, float _depth, uint8_t _stencil, uint8_t _c0, uint8_t _c1, uint8_t _c2, uint8_t _c3, uint8_t _c4, uint8_t _c5, uint8_t _c6, uint8_t _c7);
		void bgfx_set_view_mode(bgfx_view_id_t _id, bgfx_view_mode_t _mode);
		void bgfx_set_view_frame_buffer(bgfx_view_id_t _id, bgfx_frame_buffer_handle_t _handle);
		void bgfx_set_view_transform(bgfx_view_id_t _id, const(void*) _view, const(void*) _proj);
		void bgfx_set_view_order(bgfx_view_id_t _id, uint16_t _num, const(bgfx_init_t*) _order);
		bgfx_encoder_t* bgfx_encoder_begin(bool _forThread);
		void bgfx_encoder_end(bgfx_encoder_t* _encoder);
		void bgfx_encoder_set_marker(bgfx_encoder_t* _this, const(char*) _marker);
		void bgfx_encoder_set_state(bgfx_encoder_t* _this, uint64_t _state, uint32_t _rgba);
		void bgfx_encoder_set_condition(bgfx_encoder_t* _this, bgfx_occlusion_query_handle_t _handle, bool _visible);
		void bgfx_encoder_set_stencil(bgfx_encoder_t* _this, uint32_t _fstencil, uint32_t _bstencil);
		uint16_t bgfx_encoder_set_scissor(bgfx_encoder_t* _this, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height);
		void bgfx_encoder_set_scissor_cached(bgfx_encoder_t* _this, uint16_t _cache);
		uint32_t bgfx_encoder_set_transform(bgfx_encoder_t* _this, const(void*) _mtx, uint16_t _num);
		void bgfx_encoder_set_transform_cached(bgfx_encoder_t* _this, uint32_t _cache, uint16_t _num);
		uint32_t bgfx_encoder_alloc_transform(bgfx_encoder_t* _this, bgfx_transform_t* _transform, uint16_t _num);
		void bgfx_encoder_set_uniform(bgfx_encoder_t* _this, bgfx_uniform_handle_t _handle, const(void*) _value, uint16_t _num);
		void bgfx_encoder_set_index_buffer(bgfx_encoder_t* _this, bgfx_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices);
		void bgfx_encoder_set_dynamic_index_buffer(bgfx_encoder_t* _this, bgfx_dynamic_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices);
		void bgfx_encoder_set_transient_index_buffer(bgfx_encoder_t* _this, const(bgfx_transient_index_buffer_t*) _tib, uint32_t _firstIndex, uint32_t _numIndices);
		void bgfx_encoder_set_vertex_buffer(bgfx_encoder_t* _this, uint8_t _stream, bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle);
		void bgfx_encoder_set_dynamic_vertex_buffer(bgfx_encoder_t* _this, uint8_t _stream, bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle);
		void bgfx_encoder_set_transient_vertex_buffer(bgfx_encoder_t* _this, uint8_t _stream, const(bgfx_transient_vertex_buffer_t*) _tvb, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle);
		void bgfx_encoder_set_vertex_count(bgfx_encoder_t* _this, uint32_t _numVertices);
		void bgfx_encoder_set_instance_data_buffer(bgfx_encoder_t* _this, const(bgfx_instance_data_buffer_t*) _idb, uint32_t _start, uint32_t _num);
		void bgfx_encoder_set_instance_data_from_vertex_buffer(bgfx_encoder_t* _this, bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num);
		void bgfx_encoder_set_instance_data_from_dynamic_vertex_buffer(bgfx_encoder_t* _this, bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num);
		void bgfx_encoder_set_instance_count(bgfx_encoder_t* _this, uint32_t _numInstances);
		void bgfx_encoder_set_texture(bgfx_encoder_t* _this, uint8_t _stage, bgfx_uniform_handle_t _sampler, bgfx_texture_handle_t _handle, uint32_t _flags);
		void bgfx_encoder_touch(bgfx_encoder_t* _this, bgfx_view_id_t _id);
		void bgfx_encoder_submit(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _depth, bool _preserveState);
		void bgfx_encoder_submit_occlusion_query(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_occlusion_query_handle_t _occlusionQuery, uint32_t _depth, bool _preserveState);
		void bgfx_encoder_submit_indirect(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint16_t _start, uint16_t _num, uint32_t _depth, bool _preserveState);
		void bgfx_encoder_set_compute_index_buffer(bgfx_encoder_t* _this, uint8_t _stage, bgfx_index_buffer_handle_t _handle, bgfx_access_t _access);
		void bgfx_encoder_set_compute_vertex_buffer(bgfx_encoder_t* _this, uint8_t _stage, bgfx_vertex_buffer_handle_t _handle, bgfx_access_t _access);
		void bgfx_encoder_set_compute_dynamic_index_buffer(bgfx_encoder_t* _this, uint8_t _stage, bgfx_dynamic_index_buffer_handle_t _handle, bgfx_access_t _access);
		void bgfx_encoder_set_compute_dynamic_vertex_buffer(bgfx_encoder_t* _this, uint8_t _stage, bgfx_dynamic_vertex_buffer_handle_t _handle, bgfx_access_t _access);
		void bgfx_encoder_set_compute_indirect_buffer(bgfx_encoder_t* _this, uint8_t _stage, bgfx_indirect_buffer_handle_t _handle, bgfx_access_t _access);
		void bgfx_encoder_set_image(bgfx_encoder_t* _this, uint8_t _stage, bgfx_texture_handle_t _handle, uint8_t _mip, bgfx_access_t _access, bgfx_texture_format_t _format);
		void bgfx_encoder_dispatch(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _numX, uint32_t _numY, uint32_t _numZ);
		void bgfx_encoder_dispatch_indirect(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint16_t _start, uint16_t _num);
		void bgfx_encoder_discard(bgfx_encoder_t* _this);
		void bgfx_encoder_blit(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_texture_handle_t _dst, uint8_t _dstMip, uint16_t _dstX, uint16_t _dstY, uint16_t _dstZ, bgfx_texture_handle_t _src, uint8_t _srcMip, uint16_t _srcX, uint16_t _srcY, uint16_t _srcZ, uint16_t _width, uint16_t _height, uint16_t _depth);
		void bgfx_request_screen_shot(bgfx_frame_buffer_handle_t _handle, const(char*) _filePath);
		bgfx_render_frame_t bgfx_render_frame(int32_t _msecs);
		void bgfx_set_platform_data(const(bgfx_platform_data_t*) _data);
		const(bgfx_internal_data_t*) bgfx_get_internal_data();
		uintptr_t bgfx_override_internal_texture_ptr(bgfx_texture_handle_t _handle, uintptr_t _ptr);
		uintptr_t bgfx_override_internal_texture(bgfx_texture_handle_t _handle, uint16_t _width, uint16_t _height, uint8_t _numMips, bgfx_texture_format_t _format, uint64_t _flags);
		void bgfx_set_marker(const(char*) _marker);
		void bgfx_set_state(uint64_t _state, uint32_t _rgba);
		void bgfx_set_condition(bgfx_occlusion_query_handle_t _handle, bool _visible);
		void bgfx_set_stencil(uint32_t _fstencil, uint32_t _bstencil);
		uint16_t bgfx_set_scissor(uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height);
		void bgfx_set_scissor_cached(uint16_t _cache);
		uint32_t bgfx_set_transform(const(void*) _mtx, uint16_t _num);
		void bgfx_set_transform_cached(uint32_t _cache, uint16_t _num);
		uint32_t bgfx_alloc_transform(bgfx_transform_t* _transform, uint16_t _num);
		void bgfx_set_uniform(bgfx_uniform_handle_t _handle, const(void*) _value, uint16_t _num);
		void bgfx_set_index_buffer(bgfx_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices);
		void bgfx_set_dynamic_index_buffer(bgfx_dynamic_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices);
		void bgfx_set_transient_index_buffer(const(bgfx_transient_index_buffer_t*) _tib, uint32_t _firstIndex, uint32_t _numIndices);
		void bgfx_set_vertex_buffer(uint8_t _stream, bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices);
		void bgfx_set_dynamic_vertex_buffer(uint8_t _stream, bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices);
		void bgfx_set_transient_vertex_buffer(uint8_t _stream, const(bgfx_transient_vertex_buffer_t*) _tvb, uint32_t _startVertex, uint32_t _numVertices);
		void bgfx_set_vertex_count(uint32_t _numVertices);
		void bgfx_set_instance_data_buffer(const(bgfx_instance_data_buffer_t*) _idb, uint32_t _start, uint32_t _num);
		void bgfx_set_instance_data_from_vertex_buffer(bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num);
		void bgfx_set_instance_data_from_dynamic_vertex_buffer(bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num);
		void bgfx_set_instance_count(uint32_t _numInstances);
		void bgfx_set_texture(uint8_t _stage, bgfx_uniform_handle_t _sampler, bgfx_texture_handle_t _handle, uint32_t _flags);
		void bgfx_touch(bgfx_view_id_t _id);
		void bgfx_submit(bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _depth, bool _preserveState);
		void bgfx_submit_occlusion_query(bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_occlusion_query_handle_t _occlusionQuery, uint32_t _depth, bool _preserveState);
		void bgfx_submit_indirect(bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint16_t _start, uint16_t _num, uint32_t _depth, bool _preserveState);
		void bgfx_set_compute_index_buffer(uint8_t _stage, bgfx_index_buffer_handle_t _handle, bgfx_access_t _access);
		void bgfx_set_compute_vertex_buffer(uint8_t _stage, bgfx_vertex_buffer_handle_t _handle, bgfx_access_t _access);
		void bgfx_set_compute_dynamic_index_buffer(uint8_t _stage, bgfx_dynamic_index_buffer_handle_t _handle, bgfx_access_t _access);
		void bgfx_set_compute_dynamic_vertex_buffer(uint8_t _stage, bgfx_dynamic_vertex_buffer_handle_t _handle, bgfx_access_t _access);
		void bgfx_set_compute_indirect_buffer(uint8_t _stage, bgfx_indirect_buffer_handle_t _handle, bgfx_access_t _access);
		void bgfx_set_image(uint8_t _stage, bgfx_texture_handle_t _handle, uint8_t _mip, bgfx_access_t _access, bgfx_texture_format_t _format);
		void bgfx_dispatch(bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _numX, uint32_t _numY, uint32_t _numZ);
		void bgfx_dispatch_indirect(bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint16_t _start, uint16_t _num);
		void bgfx_discard();
		void bgfx_blit(bgfx_view_id_t _id, bgfx_texture_handle_t _dst, uint8_t _dstMip, uint16_t _dstX, uint16_t _dstY, uint16_t _dstZ, bgfx_texture_handle_t _src, uint8_t _srcMip, uint16_t _srcX, uint16_t _srcY, uint16_t _srcZ, uint16_t _width, uint16_t _height, uint16_t _depth);
		bgfx_interface_vtbl_t* bgfx_get_interface(uint32_t _version);
	}
}
else
{
	extern(C) @nogc nothrow
	{
		alias da_bgfx_attachment_init = void function(bgfx_attachment_t* _this, bgfx_texture_handle_t _handle, bgfx_access_t _access, uint16_t _layer, uint16_t _mip, uint8_t _resolve);
		alias da_bgfx_vertex_layout_begin = bgfx_vertex_layout_t* function(bgfx_vertex_layout_t* _this, bgfx_renderer_type_t _rendererType);
		alias da_bgfx_vertex_layout_add = bgfx_vertex_layout_t* function(bgfx_vertex_layout_t* _this, bgfx_attrib_t _attrib, uint8_t _num, bgfx_attrib_type_t _type, bool _normalized, bool _asInt);
		alias da_bgfx_vertex_layout_decode = void function(const(bgfx_vertex_layout_t*) _this, bgfx_attrib_t _attrib, uint8_t* _num, bgfx_attrib_type_t* _type, bool* _normalized, bool* _asInt);
		alias da_bgfx_vertex_layout_has = bool function(const(bgfx_vertex_layout_t*) _this, bgfx_attrib_t _attrib);
		alias da_bgfx_vertex_layout_skip = bgfx_vertex_layout_t* function(bgfx_vertex_layout_t* _this, uint8_t _num);
		alias da_bgfx_vertex_layout_end = void function(bgfx_vertex_layout_t* _this);
		alias da_bgfx_vertex_pack = void function(const float[4] _input, bool _inputNormalized, bgfx_attrib_t _attr, const(bgfx_vertex_layout_t*) _layout, void* _data, uint32_t _index);
		alias da_bgfx_vertex_unpack = void function(float[4] _output, bgfx_attrib_t _attr, const(bgfx_vertex_layout_t*) _layout, const(void*) _data, uint32_t _index);
		alias da_bgfx_vertex_convert = void function(const(bgfx_vertex_layout_t*) _dstLayout, void* _dstData, const(bgfx_vertex_layout_t*) _srcLayout, const(void*) _srcData, uint32_t _num);
		alias da_bgfx_weld_vertices = uint16_t function(uint16_t* _output, const(bgfx_vertex_layout_t*) _layout, const(void*) _data, uint16_t _num, float _epsilon);
		alias da_bgfx_topology_convert = uint32_t function(bgfx_topology_convert_t _conversion, void* _dst, uint32_t _dstSize, const(void*) _indices, uint32_t _numIndices, bool _index32);
		alias da_bgfx_topology_sort_tri_list = void function(bgfx_topology_sort_t _sort, void* _dst, uint32_t _dstSize, const float[3] _dir, const float[3] _pos, const(void*) _vertices, uint32_t _stride, const(void*) _indices, uint32_t _numIndices, bool _index32);
		alias da_bgfx_get_supported_renderers = uint8_t function(uint8_t _max, bgfx_renderer_type_t* _enum);
		alias da_bgfx_get_renderer_name = const(char*) function(bgfx_renderer_type_t _type);
		alias da_bgfx_init_ctor = void function(bgfx_init_t* _init);
		alias da_bgfx_init = bool function(const(bgfx_init_t*) _init);
		alias da_bgfx_shutdown = void function();
		alias da_bgfx_reset = void function(uint32_t _width, uint32_t _height, uint32_t _flags, bgfx_texture_format_t _format);
		alias da_bgfx_frame = uint32_t function(bool _capture);
		alias da_bgfx_get_renderer_type = bgfx_renderer_type_t function();
		alias da_bgfx_get_caps = const(bgfx_caps_t*) function();
		alias da_bgfx_get_stats = const(bgfx_stats_t*) function();
		alias da_bgfx_alloc = const(bgfx_memory_t*) function(uint32_t _size);
		alias da_bgfx_copy = const(bgfx_memory_t*) function(const(void*) _data, uint32_t _size);
		alias da_bgfx_make_ref = const(bgfx_memory_t*) function(const(void*) _data, uint32_t _size);
		alias da_bgfx_make_ref_release = const(bgfx_memory_t*) function(const(void*) _data, uint32_t _size, bgfx_release_fn_t _releaseFn, void* _userData);
		alias da_bgfx_set_debug = void function(uint32_t _debug);
		alias da_bgfx_dbg_text_clear = void function(uint8_t _attr, bool _small);
		alias da_bgfx_dbg_text_printf = void function(uint16_t _x, uint16_t _y, uint8_t _attr, const(char*) _format, ... );
		alias da_bgfx_dbg_text_vprintf = void function(uint16_t _x, uint16_t _y, uint8_t _attr, const(char*) _format, va_list _argList);
		alias da_bgfx_dbg_text_image = void function(uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height, const(void*) _data, uint16_t _pitch);
		alias da_bgfx_create_index_buffer = bgfx_index_buffer_handle_t function(const(bgfx_memory_t*) _mem, uint16_t _flags);
		alias da_bgfx_set_index_buffer_name = void function(bgfx_index_buffer_handle_t _handle, const(char*) _name, int32_t _len);
		alias da_bgfx_destroy_index_buffer = void function(bgfx_index_buffer_handle_t _handle);
		alias da_bgfx_create_vertex_layout = bgfx_vertex_layout_handle_t function(const(bgfx_vertex_layout_t*) _layout);
		alias da_bgfx_destroy_vertex_layout = void function(bgfx_vertex_layout_handle_t _layoutHandle);
		alias da_bgfx_create_vertex_buffer = bgfx_vertex_buffer_handle_t function(const(bgfx_memory_t*) _mem, const(bgfx_vertex_layout_t*) _layout, uint16_t _flags);
		alias da_bgfx_set_vertex_buffer_name = void function(bgfx_vertex_buffer_handle_t _handle, const(char*) _name, int32_t _len);
		alias da_bgfx_destroy_vertex_buffer = void function(bgfx_vertex_buffer_handle_t _handle);
		alias da_bgfx_create_dynamic_index_buffer = bgfx_dynamic_index_buffer_handle_t function(uint32_t _num, uint16_t _flags);
		alias da_bgfx_create_dynamic_index_buffer_mem = bgfx_dynamic_index_buffer_handle_t function(const(bgfx_memory_t*) _mem, uint16_t _flags);
		alias da_bgfx_update_dynamic_index_buffer = void function(bgfx_dynamic_index_buffer_handle_t _handle, uint32_t _startIndex, const(bgfx_memory_t*) _mem);
		alias da_bgfx_destroy_dynamic_index_buffer = void function(bgfx_dynamic_index_buffer_handle_t _handle);
		alias da_bgfx_create_dynamic_vertex_buffer = bgfx_dynamic_vertex_buffer_handle_t function(uint32_t _num, const(bgfx_vertex_layout_t*) _layout, uint16_t _flags);
		alias da_bgfx_create_dynamic_vertex_buffer_mem = bgfx_dynamic_vertex_buffer_handle_t function(const(bgfx_memory_t*) _mem, const(bgfx_vertex_layout_t*) _layout, uint16_t _flags);
		alias da_bgfx_update_dynamic_vertex_buffer = void function(bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, const(bgfx_memory_t*) _mem);
		alias da_bgfx_destroy_dynamic_vertex_buffer = void function(bgfx_dynamic_vertex_buffer_handle_t _handle);
		alias da_bgfx_get_avail_transient_index_buffer = uint32_t function(uint32_t _num);
		alias da_bgfx_get_avail_transient_vertex_buffer = uint32_t function(uint32_t _num, const(bgfx_vertex_layout_t*) _layout);
		alias da_bgfx_get_avail_instance_data_buffer = uint32_t function(uint32_t _num, uint16_t _stride);
		alias da_bgfx_alloc_transient_index_buffer = void function(bgfx_transient_index_buffer_t* _tib, uint32_t _num);
		alias da_bgfx_alloc_transient_vertex_buffer = void function(bgfx_transient_vertex_buffer_t* _tvb, uint32_t _num, const(bgfx_vertex_layout_t*) _layout);
		alias da_bgfx_alloc_transient_buffers = bool function(bgfx_transient_vertex_buffer_t* _tvb, const(bgfx_vertex_layout_t*) _layout, uint32_t _numVertices, bgfx_transient_index_buffer_t* _tib, uint32_t _numIndices);
		alias da_bgfx_alloc_instance_data_buffer = void function(bgfx_instance_data_buffer_t* _idb, uint32_t _num, uint16_t _stride);
		alias da_bgfx_create_indirect_buffer = bgfx_indirect_buffer_handle_t function(uint32_t _num);
		alias da_bgfx_destroy_indirect_buffer = void function(bgfx_indirect_buffer_handle_t _handle);
		alias da_bgfx_create_shader = bgfx_shader_handle_t function(const(bgfx_memory_t*) _mem);
		alias da_bgfx_get_shader_uniforms = uint16_t function(bgfx_shader_handle_t _handle, bgfx_uniform_handle_t* _uniforms, uint16_t _max);
		alias da_bgfx_set_shader_name = void function(bgfx_shader_handle_t _handle, const(char*) _name, int32_t _len);
		alias da_bgfx_destroy_shader = void function(bgfx_shader_handle_t _handle);
		alias da_bgfx_create_program = bgfx_program_handle_t function(bgfx_shader_handle_t _vsh, bgfx_shader_handle_t _fsh, bool _destroyShaders);
		alias da_bgfx_create_compute_program = bgfx_program_handle_t function(bgfx_shader_handle_t _csh, bool _destroyShaders);
		alias da_bgfx_destroy_program = void function(bgfx_program_handle_t _handle);
		alias da_bgfx_is_texture_valid = bool function(uint16_t _depth, bool _cubeMap, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags);
		alias da_bgfx_calc_texture_size = void function(bgfx_texture_info_t* _info, uint16_t _width, uint16_t _height, uint16_t _depth, bool _cubeMap, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format);
		alias da_bgfx_create_texture = bgfx_texture_handle_t function(const(bgfx_memory_t*) _mem, uint64_t _flags, uint8_t _skip, bgfx_texture_info_t* _info);
		alias da_bgfx_create_texture_2d = bgfx_texture_handle_t function(uint16_t _width, uint16_t _height, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags, const(bgfx_memory_t*) _mem);
		alias da_bgfx_create_texture_2d_scaled = bgfx_texture_handle_t function(bgfx_backbuffer_ratio_t _ratio, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags);
		alias da_bgfx_create_texture_3d = bgfx_texture_handle_t function(uint16_t _width, uint16_t _height, uint16_t _depth, bool _hasMips, bgfx_texture_format_t _format, uint64_t _flags, const(bgfx_memory_t*) _mem);
		alias da_bgfx_create_texture_cube = bgfx_texture_handle_t function(uint16_t _size, bool _hasMips, uint16_t _numLayers, bgfx_texture_format_t _format, uint64_t _flags, const(bgfx_memory_t*) _mem);
		alias da_bgfx_update_texture_2d = void function(bgfx_texture_handle_t _handle, uint16_t _layer, uint8_t _mip, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height, const(bgfx_memory_t*) _mem, uint16_t _pitch);
		alias da_bgfx_update_texture_3d = void function(bgfx_texture_handle_t _handle, uint8_t _mip, uint16_t _x, uint16_t _y, uint16_t _z, uint16_t _width, uint16_t _height, uint16_t _depth, const(bgfx_memory_t*) _mem);
		alias da_bgfx_update_texture_cube = void function(bgfx_texture_handle_t _handle, uint16_t _layer, uint8_t _side, uint8_t _mip, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height, const(bgfx_memory_t*) _mem, uint16_t _pitch);
		alias da_bgfx_read_texture = uint32_t function(bgfx_texture_handle_t _handle, void* _data, uint8_t _mip);
		alias da_bgfx_set_texture_name = void function(bgfx_texture_handle_t _handle, const(char*) _name, int32_t _len);
		alias da_bgfx_get_direct_access_ptr = void* function(bgfx_texture_handle_t _handle);
		alias da_bgfx_destroy_texture = void function(bgfx_texture_handle_t _handle);
		alias da_bgfx_create_frame_buffer = bgfx_frame_buffer_handle_t function(uint16_t _width, uint16_t _height, bgfx_texture_format_t _format, uint64_t _textureFlags);
		alias da_bgfx_create_frame_buffer_scaled = bgfx_frame_buffer_handle_t function(bgfx_backbuffer_ratio_t _ratio, bgfx_texture_format_t _format, uint64_t _textureFlags);
		alias da_bgfx_create_frame_buffer_from_handles = bgfx_frame_buffer_handle_t function(uint8_t _num, const(bgfx_texture_handle_t*) _handles, bool _destroyTexture);
		alias da_bgfx_create_frame_buffer_from_attachment = bgfx_frame_buffer_handle_t function(uint8_t _num, const(bgfx_attachment_t*) _attachment, bool _destroyTexture);
		alias da_bgfx_create_frame_buffer_from_nwh = bgfx_frame_buffer_handle_t function(void* _nwh, uint16_t _width, uint16_t _height, bgfx_texture_format_t _format, bgfx_texture_format_t _depthFormat);
		alias da_bgfx_set_frame_buffer_name = void function(bgfx_frame_buffer_handle_t _handle, const(char*) _name, int32_t _len);
		alias da_bgfx_get_texture = bgfx_texture_handle_t function(bgfx_frame_buffer_handle_t _handle, uint8_t _attachment);
		alias da_bgfx_destroy_frame_buffer = void function(bgfx_frame_buffer_handle_t _handle);
		alias da_bgfx_create_uniform = bgfx_uniform_handle_t function(const(char*) _name, bgfx_uniform_type_t _type, uint16_t _num);
		alias da_bgfx_get_uniform_info = void function(bgfx_uniform_handle_t _handle, bgfx_uniform_info_t* _info);
		alias da_bgfx_destroy_uniform = void function(bgfx_uniform_handle_t _handle);
		alias da_bgfx_create_occlusion_query = bgfx_occlusion_query_handle_t function();
		alias da_bgfx_get_result = bgfx_occlusion_query_result_t function(bgfx_occlusion_query_handle_t _handle, int32_t* _result);
		alias da_bgfx_destroy_occlusion_query = void function(bgfx_occlusion_query_handle_t _handle);
		alias da_bgfx_set_palette_color = void function(uint8_t _index, const float[4] _rgba);
		alias da_bgfx_set_palette_color_rgba8 = void function(uint8_t _index, uint32_t _rgba);
		alias da_bgfx_set_view_name = void function(bgfx_view_id_t _id, const(char*) _name);
		alias da_bgfx_set_view_rect = void function(bgfx_view_id_t _id, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height);
		alias da_bgfx_set_view_rect_ratio = void function(bgfx_view_id_t _id, uint16_t _x, uint16_t _y, bgfx_backbuffer_ratio_t _ratio);
		alias da_bgfx_set_view_scissor = void function(bgfx_view_id_t _id, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height);
		alias da_bgfx_set_view_clear = void function(bgfx_view_id_t _id, uint16_t _flags, uint32_t _rgba, float _depth, uint8_t _stencil);
		alias da_bgfx_set_view_clear_mrt = void function(bgfx_view_id_t _id, uint16_t _flags, float _depth, uint8_t _stencil, uint8_t _c0, uint8_t _c1, uint8_t _c2, uint8_t _c3, uint8_t _c4, uint8_t _c5, uint8_t _c6, uint8_t _c7);
		alias da_bgfx_set_view_mode = void function(bgfx_view_id_t _id, bgfx_view_mode_t _mode);
		alias da_bgfx_set_view_frame_buffer = void function(bgfx_view_id_t _id, bgfx_frame_buffer_handle_t _handle);
		alias da_bgfx_set_view_transform = void function(bgfx_view_id_t _id, const(void*) _view, const(void*) _proj);
		alias da_bgfx_set_view_order = void function(bgfx_view_id_t _id, uint16_t _num, const(bgfx_init_t*) _order);
		alias da_bgfx_encoder_begin = bgfx_encoder_t* function(bool _forThread);
		alias da_bgfx_encoder_end = void function(bgfx_encoder_t* _encoder);
		alias da_bgfx_encoder_set_marker = void function(bgfx_encoder_t* _this, const(char*) _marker);
		alias da_bgfx_encoder_set_state = void function(bgfx_encoder_t* _this, uint64_t _state, uint32_t _rgba);
		alias da_bgfx_encoder_set_condition = void function(bgfx_encoder_t* _this, bgfx_occlusion_query_handle_t _handle, bool _visible);
		alias da_bgfx_encoder_set_stencil = void function(bgfx_encoder_t* _this, uint32_t _fstencil, uint32_t _bstencil);
		alias da_bgfx_encoder_set_scissor = uint16_t function(bgfx_encoder_t* _this, uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height);
		alias da_bgfx_encoder_set_scissor_cached = void function(bgfx_encoder_t* _this, uint16_t _cache);
		alias da_bgfx_encoder_set_transform = uint32_t function(bgfx_encoder_t* _this, const(void*) _mtx, uint16_t _num);
		alias da_bgfx_encoder_set_transform_cached = void function(bgfx_encoder_t* _this, uint32_t _cache, uint16_t _num);
		alias da_bgfx_encoder_alloc_transform = uint32_t function(bgfx_encoder_t* _this, bgfx_transform_t* _transform, uint16_t _num);
		alias da_bgfx_encoder_set_uniform = void function(bgfx_encoder_t* _this, bgfx_uniform_handle_t _handle, const(void*) _value, uint16_t _num);
		alias da_bgfx_encoder_set_index_buffer = void function(bgfx_encoder_t* _this, bgfx_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices);
		alias da_bgfx_encoder_set_dynamic_index_buffer = void function(bgfx_encoder_t* _this, bgfx_dynamic_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices);
		alias da_bgfx_encoder_set_transient_index_buffer = void function(bgfx_encoder_t* _this, const(bgfx_transient_index_buffer_t*) _tib, uint32_t _firstIndex, uint32_t _numIndices);
		alias da_bgfx_encoder_set_vertex_buffer = void function(bgfx_encoder_t* _this, uint8_t _stream, bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle);
		alias da_bgfx_encoder_set_dynamic_vertex_buffer = void function(bgfx_encoder_t* _this, uint8_t _stream, bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle);
		alias da_bgfx_encoder_set_transient_vertex_buffer = void function(bgfx_encoder_t* _this, uint8_t _stream, const(bgfx_transient_vertex_buffer_t*) _tvb, uint32_t _startVertex, uint32_t _numVertices, bgfx_vertex_layout_handle_t _layoutHandle);
		alias da_bgfx_encoder_set_vertex_count = void function(bgfx_encoder_t* _this, uint32_t _numVertices);
		alias da_bgfx_encoder_set_instance_data_buffer = void function(bgfx_encoder_t* _this, const(bgfx_instance_data_buffer_t*) _idb, uint32_t _start, uint32_t _num);
		alias da_bgfx_encoder_set_instance_data_from_vertex_buffer = void function(bgfx_encoder_t* _this, bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num);
		alias da_bgfx_encoder_set_instance_data_from_dynamic_vertex_buffer = void function(bgfx_encoder_t* _this, bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num);
		alias da_bgfx_encoder_set_instance_count = void function(bgfx_encoder_t* _this, uint32_t _numInstances);
		alias da_bgfx_encoder_set_texture = void function(bgfx_encoder_t* _this, uint8_t _stage, bgfx_uniform_handle_t _sampler, bgfx_texture_handle_t _handle, uint32_t _flags);
		alias da_bgfx_encoder_touch = void function(bgfx_encoder_t* _this, bgfx_view_id_t _id);
		alias da_bgfx_encoder_submit = void function(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _depth, bool _preserveState);
		alias da_bgfx_encoder_submit_occlusion_query = void function(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_occlusion_query_handle_t _occlusionQuery, uint32_t _depth, bool _preserveState);
		alias da_bgfx_encoder_submit_indirect = void function(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint16_t _start, uint16_t _num, uint32_t _depth, bool _preserveState);
		alias da_bgfx_encoder_set_compute_index_buffer = void function(bgfx_encoder_t* _this, uint8_t _stage, bgfx_index_buffer_handle_t _handle, bgfx_access_t _access);
		alias da_bgfx_encoder_set_compute_vertex_buffer = void function(bgfx_encoder_t* _this, uint8_t _stage, bgfx_vertex_buffer_handle_t _handle, bgfx_access_t _access);
		alias da_bgfx_encoder_set_compute_dynamic_index_buffer = void function(bgfx_encoder_t* _this, uint8_t _stage, bgfx_dynamic_index_buffer_handle_t _handle, bgfx_access_t _access);
		alias da_bgfx_encoder_set_compute_dynamic_vertex_buffer = void function(bgfx_encoder_t* _this, uint8_t _stage, bgfx_dynamic_vertex_buffer_handle_t _handle, bgfx_access_t _access);
		alias da_bgfx_encoder_set_compute_indirect_buffer = void function(bgfx_encoder_t* _this, uint8_t _stage, bgfx_indirect_buffer_handle_t _handle, bgfx_access_t _access);
		alias da_bgfx_encoder_set_image = void function(bgfx_encoder_t* _this, uint8_t _stage, bgfx_texture_handle_t _handle, uint8_t _mip, bgfx_access_t _access, bgfx_texture_format_t _format);
		alias da_bgfx_encoder_dispatch = void function(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _numX, uint32_t _numY, uint32_t _numZ);
		alias da_bgfx_encoder_dispatch_indirect = void function(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint16_t _start, uint16_t _num);
		alias da_bgfx_encoder_discard = void function(bgfx_encoder_t* _this);
		alias da_bgfx_encoder_blit = void function(bgfx_encoder_t* _this, bgfx_view_id_t _id, bgfx_texture_handle_t _dst, uint8_t _dstMip, uint16_t _dstX, uint16_t _dstY, uint16_t _dstZ, bgfx_texture_handle_t _src, uint8_t _srcMip, uint16_t _srcX, uint16_t _srcY, uint16_t _srcZ, uint16_t _width, uint16_t _height, uint16_t _depth);
		alias da_bgfx_request_screen_shot = void function(bgfx_frame_buffer_handle_t _handle, const(char*) _filePath);
		alias da_bgfx_render_frame = bgfx_render_frame_t function(int32_t _msecs);
		alias da_bgfx_set_platform_data = void function(const(bgfx_platform_data_t*) _data);
		alias da_bgfx_get_internal_data = const(bgfx_internal_data_t*) function();
		alias da_bgfx_override_internal_texture_ptr = uintptr_t function(bgfx_texture_handle_t _handle, uintptr_t _ptr);
		alias da_bgfx_override_internal_texture = uintptr_t function(bgfx_texture_handle_t _handle, uint16_t _width, uint16_t _height, uint8_t _numMips, bgfx_texture_format_t _format, uint64_t _flags);
		alias da_bgfx_set_marker = void function(const(char*) _marker);
		alias da_bgfx_set_state = void function(uint64_t _state, uint32_t _rgba);
		alias da_bgfx_set_condition = void function(bgfx_occlusion_query_handle_t _handle, bool _visible);
		alias da_bgfx_set_stencil = void function(uint32_t _fstencil, uint32_t _bstencil);
		alias da_bgfx_set_scissor = uint16_t function(uint16_t _x, uint16_t _y, uint16_t _width, uint16_t _height);
		alias da_bgfx_set_scissor_cached = void function(uint16_t _cache);
		alias da_bgfx_set_transform = uint32_t function(const(void*) _mtx, uint16_t _num);
		alias da_bgfx_set_transform_cached = void function(uint32_t _cache, uint16_t _num);
		alias da_bgfx_alloc_transform = uint32_t function(bgfx_transform_t* _transform, uint16_t _num);
		alias da_bgfx_set_uniform = void function(bgfx_uniform_handle_t _handle, const(void*) _value, uint16_t _num);
		alias da_bgfx_set_index_buffer = void function(bgfx_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices);
		alias da_bgfx_set_dynamic_index_buffer = void function(bgfx_dynamic_index_buffer_handle_t _handle, uint32_t _firstIndex, uint32_t _numIndices);
		alias da_bgfx_set_transient_index_buffer = void function(const(bgfx_transient_index_buffer_t*) _tib, uint32_t _firstIndex, uint32_t _numIndices);
		alias da_bgfx_set_vertex_buffer = void function(uint8_t _stream, bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices);
		alias da_bgfx_set_dynamic_vertex_buffer = void function(uint8_t _stream, bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _numVertices);
		alias da_bgfx_set_transient_vertex_buffer = void function(uint8_t _stream, const(bgfx_transient_vertex_buffer_t*) _tvb, uint32_t _startVertex, uint32_t _numVertices);
		alias da_bgfx_set_vertex_count = void function(uint32_t _numVertices);
		alias da_bgfx_set_instance_data_buffer = void function(const(bgfx_instance_data_buffer_t*) _idb, uint32_t _start, uint32_t _num);
		alias da_bgfx_set_instance_data_from_vertex_buffer = void function(bgfx_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num);
		alias da_bgfx_set_instance_data_from_dynamic_vertex_buffer = void function(bgfx_dynamic_vertex_buffer_handle_t _handle, uint32_t _startVertex, uint32_t _num);
		alias da_bgfx_set_instance_count = void function(uint32_t _numInstances);
		alias da_bgfx_set_texture = void function(uint8_t _stage, bgfx_uniform_handle_t _sampler, bgfx_texture_handle_t _handle, uint32_t _flags);
		alias da_bgfx_touch = void function(bgfx_view_id_t _id);
		alias da_bgfx_submit = void function(bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _depth, bool _preserveState);
		alias da_bgfx_submit_occlusion_query = void function(bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_occlusion_query_handle_t _occlusionQuery, uint32_t _depth, bool _preserveState);
		alias da_bgfx_submit_indirect = void function(bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint16_t _start, uint16_t _num, uint32_t _depth, bool _preserveState);
		alias da_bgfx_set_compute_index_buffer = void function(uint8_t _stage, bgfx_index_buffer_handle_t _handle, bgfx_access_t _access);
		alias da_bgfx_set_compute_vertex_buffer = void function(uint8_t _stage, bgfx_vertex_buffer_handle_t _handle, bgfx_access_t _access);
		alias da_bgfx_set_compute_dynamic_index_buffer = void function(uint8_t _stage, bgfx_dynamic_index_buffer_handle_t _handle, bgfx_access_t _access);
		alias da_bgfx_set_compute_dynamic_vertex_buffer = void function(uint8_t _stage, bgfx_dynamic_vertex_buffer_handle_t _handle, bgfx_access_t _access);
		alias da_bgfx_set_compute_indirect_buffer = void function(uint8_t _stage, bgfx_indirect_buffer_handle_t _handle, bgfx_access_t _access);
		alias da_bgfx_set_image = void function(uint8_t _stage, bgfx_texture_handle_t _handle, uint8_t _mip, bgfx_access_t _access, bgfx_texture_format_t _format);
		alias da_bgfx_dispatch = void function(bgfx_view_id_t _id, bgfx_program_handle_t _program, uint32_t _numX, uint32_t _numY, uint32_t _numZ);
		alias da_bgfx_dispatch_indirect = void function(bgfx_view_id_t _id, bgfx_program_handle_t _program, bgfx_indirect_buffer_handle_t _indirectHandle, uint16_t _start, uint16_t _num);
		alias da_bgfx_discard = void function();
		alias da_bgfx_blit = void function(bgfx_view_id_t _id, bgfx_texture_handle_t _dst, uint8_t _dstMip, uint16_t _dstX, uint16_t _dstY, uint16_t _dstZ, bgfx_texture_handle_t _src, uint8_t _srcMip, uint16_t _srcX, uint16_t _srcY, uint16_t _srcZ, uint16_t _width, uint16_t _height, uint16_t _depth);
		alias da_bgfx_get_interface = bgfx_interface_vtbl_t* function(uint32_t _version);
	}

	__gshared
	{
		da_bgfx_attachment_init bgfx_attachment_init;
		da_bgfx_vertex_layout_begin bgfx_vertex_layout_begin;
		da_bgfx_vertex_layout_add bgfx_vertex_layout_add;
		da_bgfx_vertex_layout_decode bgfx_vertex_layout_decode;
		da_bgfx_vertex_layout_has bgfx_vertex_layout_has;
		da_bgfx_vertex_layout_skip bgfx_vertex_layout_skip;
		da_bgfx_vertex_layout_end bgfx_vertex_layout_end;
		da_bgfx_vertex_pack bgfx_vertex_pack;
		da_bgfx_vertex_unpack bgfx_vertex_unpack;
		da_bgfx_vertex_convert bgfx_vertex_convert;
		da_bgfx_weld_vertices bgfx_weld_vertices;
		da_bgfx_topology_convert bgfx_topology_convert;
		da_bgfx_topology_sort_tri_list bgfx_topology_sort_tri_list;
		da_bgfx_get_supported_renderers bgfx_get_supported_renderers;
		da_bgfx_get_renderer_name bgfx_get_renderer_name;
		da_bgfx_init_ctor bgfx_init_ctor;
		da_bgfx_init bgfx_init;
		da_bgfx_shutdown bgfx_shutdown;
		da_bgfx_reset bgfx_reset;
		da_bgfx_frame bgfx_frame;
		da_bgfx_get_renderer_type bgfx_get_renderer_type;
		da_bgfx_get_caps bgfx_get_caps;
		da_bgfx_get_stats bgfx_get_stats;
		da_bgfx_alloc bgfx_alloc;
		da_bgfx_copy bgfx_copy;
		da_bgfx_make_ref bgfx_make_ref;
		da_bgfx_make_ref_release bgfx_make_ref_release;
		da_bgfx_set_debug bgfx_set_debug;
		da_bgfx_dbg_text_clear bgfx_dbg_text_clear;
		da_bgfx_dbg_text_printf bgfx_dbg_text_printf;
		da_bgfx_dbg_text_vprintf bgfx_dbg_text_vprintf;
		da_bgfx_dbg_text_image bgfx_dbg_text_image;
		da_bgfx_create_index_buffer bgfx_create_index_buffer;
		da_bgfx_set_index_buffer_name bgfx_set_index_buffer_name;
		da_bgfx_destroy_index_buffer bgfx_destroy_index_buffer;
		da_bgfx_create_vertex_layout bgfx_create_vertex_layout;
		da_bgfx_destroy_vertex_layout bgfx_destroy_vertex_layout;
		da_bgfx_create_vertex_buffer bgfx_create_vertex_buffer;
		da_bgfx_set_vertex_buffer_name bgfx_set_vertex_buffer_name;
		da_bgfx_destroy_vertex_buffer bgfx_destroy_vertex_buffer;
		da_bgfx_create_dynamic_index_buffer bgfx_create_dynamic_index_buffer;
		da_bgfx_create_dynamic_index_buffer_mem bgfx_create_dynamic_index_buffer_mem;
		da_bgfx_update_dynamic_index_buffer bgfx_update_dynamic_index_buffer;
		da_bgfx_destroy_dynamic_index_buffer bgfx_destroy_dynamic_index_buffer;
		da_bgfx_create_dynamic_vertex_buffer bgfx_create_dynamic_vertex_buffer;
		da_bgfx_create_dynamic_vertex_buffer_mem bgfx_create_dynamic_vertex_buffer_mem;
		da_bgfx_update_dynamic_vertex_buffer bgfx_update_dynamic_vertex_buffer;
		da_bgfx_destroy_dynamic_vertex_buffer bgfx_destroy_dynamic_vertex_buffer;
		da_bgfx_get_avail_transient_index_buffer bgfx_get_avail_transient_index_buffer;
		da_bgfx_get_avail_transient_vertex_buffer bgfx_get_avail_transient_vertex_buffer;
		da_bgfx_get_avail_instance_data_buffer bgfx_get_avail_instance_data_buffer;
		da_bgfx_alloc_transient_index_buffer bgfx_alloc_transient_index_buffer;
		da_bgfx_alloc_transient_vertex_buffer bgfx_alloc_transient_vertex_buffer;
		da_bgfx_alloc_transient_buffers bgfx_alloc_transient_buffers;
		da_bgfx_alloc_instance_data_buffer bgfx_alloc_instance_data_buffer;
		da_bgfx_create_indirect_buffer bgfx_create_indirect_buffer;
		da_bgfx_destroy_indirect_buffer bgfx_destroy_indirect_buffer;
		da_bgfx_create_shader bgfx_create_shader;
		da_bgfx_get_shader_uniforms bgfx_get_shader_uniforms;
		da_bgfx_set_shader_name bgfx_set_shader_name;
		da_bgfx_destroy_shader bgfx_destroy_shader;
		da_bgfx_create_program bgfx_create_program;
		da_bgfx_create_compute_program bgfx_create_compute_program;
		da_bgfx_destroy_program bgfx_destroy_program;
		da_bgfx_is_texture_valid bgfx_is_texture_valid;
		da_bgfx_calc_texture_size bgfx_calc_texture_size;
		da_bgfx_create_texture bgfx_create_texture;
		da_bgfx_create_texture_2d bgfx_create_texture_2d;
		da_bgfx_create_texture_2d_scaled bgfx_create_texture_2d_scaled;
		da_bgfx_create_texture_3d bgfx_create_texture_3d;
		da_bgfx_create_texture_cube bgfx_create_texture_cube;
		da_bgfx_update_texture_2d bgfx_update_texture_2d;
		da_bgfx_update_texture_3d bgfx_update_texture_3d;
		da_bgfx_update_texture_cube bgfx_update_texture_cube;
		da_bgfx_read_texture bgfx_read_texture;
		da_bgfx_set_texture_name bgfx_set_texture_name;
		da_bgfx_get_direct_access_ptr bgfx_get_direct_access_ptr;
		da_bgfx_destroy_texture bgfx_destroy_texture;
		da_bgfx_create_frame_buffer bgfx_create_frame_buffer;
		da_bgfx_create_frame_buffer_scaled bgfx_create_frame_buffer_scaled;
		da_bgfx_create_frame_buffer_from_handles bgfx_create_frame_buffer_from_handles;
		da_bgfx_create_frame_buffer_from_attachment bgfx_create_frame_buffer_from_attachment;
		da_bgfx_create_frame_buffer_from_nwh bgfx_create_frame_buffer_from_nwh;
		da_bgfx_set_frame_buffer_name bgfx_set_frame_buffer_name;
		da_bgfx_get_texture bgfx_get_texture;
		da_bgfx_destroy_frame_buffer bgfx_destroy_frame_buffer;
		da_bgfx_create_uniform bgfx_create_uniform;
		da_bgfx_get_uniform_info bgfx_get_uniform_info;
		da_bgfx_destroy_uniform bgfx_destroy_uniform;
		da_bgfx_create_occlusion_query bgfx_create_occlusion_query;
		da_bgfx_get_result bgfx_get_result;
		da_bgfx_destroy_occlusion_query bgfx_destroy_occlusion_query;
		da_bgfx_set_palette_color bgfx_set_palette_color;
		da_bgfx_set_palette_color_rgba8 bgfx_set_palette_color_rgba8;
		da_bgfx_set_view_name bgfx_set_view_name;
		da_bgfx_set_view_rect bgfx_set_view_rect;
		da_bgfx_set_view_rect_ratio bgfx_set_view_rect_ratio;
		da_bgfx_set_view_scissor bgfx_set_view_scissor;
		da_bgfx_set_view_clear bgfx_set_view_clear;
		da_bgfx_set_view_clear_mrt bgfx_set_view_clear_mrt;
		da_bgfx_set_view_mode bgfx_set_view_mode;
		da_bgfx_set_view_frame_buffer bgfx_set_view_frame_buffer;
		da_bgfx_set_view_transform bgfx_set_view_transform;
		da_bgfx_set_view_order bgfx_set_view_order;
		da_bgfx_encoder_begin bgfx_encoder_begin;
		da_bgfx_encoder_end bgfx_encoder_end;
		da_bgfx_encoder_set_marker bgfx_encoder_set_marker;
		da_bgfx_encoder_set_state bgfx_encoder_set_state;
		da_bgfx_encoder_set_condition bgfx_encoder_set_condition;
		da_bgfx_encoder_set_stencil bgfx_encoder_set_stencil;
		da_bgfx_encoder_set_scissor bgfx_encoder_set_scissor;
		da_bgfx_encoder_set_scissor_cached bgfx_encoder_set_scissor_cached;
		da_bgfx_encoder_set_transform bgfx_encoder_set_transform;
		da_bgfx_encoder_set_transform_cached bgfx_encoder_set_transform_cached;
		da_bgfx_encoder_alloc_transform bgfx_encoder_alloc_transform;
		da_bgfx_encoder_set_uniform bgfx_encoder_set_uniform;
		da_bgfx_encoder_set_index_buffer bgfx_encoder_set_index_buffer;
		da_bgfx_encoder_set_dynamic_index_buffer bgfx_encoder_set_dynamic_index_buffer;
		da_bgfx_encoder_set_transient_index_buffer bgfx_encoder_set_transient_index_buffer;
		da_bgfx_encoder_set_vertex_buffer bgfx_encoder_set_vertex_buffer;
		da_bgfx_encoder_set_dynamic_vertex_buffer bgfx_encoder_set_dynamic_vertex_buffer;
		da_bgfx_encoder_set_transient_vertex_buffer bgfx_encoder_set_transient_vertex_buffer;
		da_bgfx_encoder_set_vertex_count bgfx_encoder_set_vertex_count;
		da_bgfx_encoder_set_instance_data_buffer bgfx_encoder_set_instance_data_buffer;
		da_bgfx_encoder_set_instance_data_from_vertex_buffer bgfx_encoder_set_instance_data_from_vertex_buffer;
		da_bgfx_encoder_set_instance_data_from_dynamic_vertex_buffer bgfx_encoder_set_instance_data_from_dynamic_vertex_buffer;
		da_bgfx_encoder_set_instance_count bgfx_encoder_set_instance_count;
		da_bgfx_encoder_set_texture bgfx_encoder_set_texture;
		da_bgfx_encoder_touch bgfx_encoder_touch;
		da_bgfx_encoder_submit bgfx_encoder_submit;
		da_bgfx_encoder_submit_occlusion_query bgfx_encoder_submit_occlusion_query;
		da_bgfx_encoder_submit_indirect bgfx_encoder_submit_indirect;
		da_bgfx_encoder_set_compute_index_buffer bgfx_encoder_set_compute_index_buffer;
		da_bgfx_encoder_set_compute_vertex_buffer bgfx_encoder_set_compute_vertex_buffer;
		da_bgfx_encoder_set_compute_dynamic_index_buffer bgfx_encoder_set_compute_dynamic_index_buffer;
		da_bgfx_encoder_set_compute_dynamic_vertex_buffer bgfx_encoder_set_compute_dynamic_vertex_buffer;
		da_bgfx_encoder_set_compute_indirect_buffer bgfx_encoder_set_compute_indirect_buffer;
		da_bgfx_encoder_set_image bgfx_encoder_set_image;
		da_bgfx_encoder_dispatch bgfx_encoder_dispatch;
		da_bgfx_encoder_dispatch_indirect bgfx_encoder_dispatch_indirect;
		da_bgfx_encoder_discard bgfx_encoder_discard;
		da_bgfx_encoder_blit bgfx_encoder_blit;
		da_bgfx_request_screen_shot bgfx_request_screen_shot;
		da_bgfx_render_frame bgfx_render_frame;
		da_bgfx_set_platform_data bgfx_set_platform_data;
		da_bgfx_get_internal_data bgfx_get_internal_data;
		da_bgfx_override_internal_texture_ptr bgfx_override_internal_texture_ptr;
		da_bgfx_override_internal_texture bgfx_override_internal_texture;
		da_bgfx_set_marker bgfx_set_marker;
		da_bgfx_set_state bgfx_set_state;
		da_bgfx_set_condition bgfx_set_condition;
		da_bgfx_set_stencil bgfx_set_stencil;
		da_bgfx_set_scissor bgfx_set_scissor;
		da_bgfx_set_scissor_cached bgfx_set_scissor_cached;
		da_bgfx_set_transform bgfx_set_transform;
		da_bgfx_set_transform_cached bgfx_set_transform_cached;
		da_bgfx_alloc_transform bgfx_alloc_transform;
		da_bgfx_set_uniform bgfx_set_uniform;
		da_bgfx_set_index_buffer bgfx_set_index_buffer;
		da_bgfx_set_dynamic_index_buffer bgfx_set_dynamic_index_buffer;
		da_bgfx_set_transient_index_buffer bgfx_set_transient_index_buffer;
		da_bgfx_set_vertex_buffer bgfx_set_vertex_buffer;
		da_bgfx_set_dynamic_vertex_buffer bgfx_set_dynamic_vertex_buffer;
		da_bgfx_set_transient_vertex_buffer bgfx_set_transient_vertex_buffer;
		da_bgfx_set_vertex_count bgfx_set_vertex_count;
		da_bgfx_set_instance_data_buffer bgfx_set_instance_data_buffer;
		da_bgfx_set_instance_data_from_vertex_buffer bgfx_set_instance_data_from_vertex_buffer;
		da_bgfx_set_instance_data_from_dynamic_vertex_buffer bgfx_set_instance_data_from_dynamic_vertex_buffer;
		da_bgfx_set_instance_count bgfx_set_instance_count;
		da_bgfx_set_texture bgfx_set_texture;
		da_bgfx_touch bgfx_touch;
		da_bgfx_submit bgfx_submit;
		da_bgfx_submit_occlusion_query bgfx_submit_occlusion_query;
		da_bgfx_submit_indirect bgfx_submit_indirect;
		da_bgfx_set_compute_index_buffer bgfx_set_compute_index_buffer;
		da_bgfx_set_compute_vertex_buffer bgfx_set_compute_vertex_buffer;
		da_bgfx_set_compute_dynamic_index_buffer bgfx_set_compute_dynamic_index_buffer;
		da_bgfx_set_compute_dynamic_vertex_buffer bgfx_set_compute_dynamic_vertex_buffer;
		da_bgfx_set_compute_indirect_buffer bgfx_set_compute_indirect_buffer;
		da_bgfx_set_image bgfx_set_image;
		da_bgfx_dispatch bgfx_dispatch;
		da_bgfx_dispatch_indirect bgfx_dispatch_indirect;
		da_bgfx_discard bgfx_discard;
		da_bgfx_blit bgfx_blit;
		da_bgfx_get_interface bgfx_get_interface;
	}
}